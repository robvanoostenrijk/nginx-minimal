ARG NGINX_VERSION="1.16.0"

FROM	registry.access.redhat.com/ubi7-minimal AS build

ARG NGINX_VERSION

ENV	BROTLI_VERSION="1.0.7" \
	NGINX_BROTLI_COMMIT="8104036af9cff4b1d34f22d00ba857e2a93a243c" \
	NGINX_CLOUDFLARE_BROTLI_COMMIT="7df1e381d7abefa53a226306057453a202cd60c2" \
	NGINX_MORE_HEADERS_VERSION="0.33" \
	NGINX_ECHO_VERSION="0.61" \
	NGINX_NJS_VERSION="0.3.3" \
	NGINX_PAGE_SPEED_VERSION="1.13.35.2-stable" \
	GLIBC_VERSION="2.17" \
	ZLIB_VERSION="1.2.11" \
	PCRE_VERSION="8.43" \
	OPENSSL_VERSION="1.1.1c"

COPY	patches/nginx_${NGINX_VERSION}_dynamic_tls_records_spdy.patch \
		patches/nginx_${NGINX_VERSION}_http2_spdy.patch \
		patches/nginx_${NGINX_VERSION}_hpack_push_remove_server_header.patch \
		/build/nginx-${NGINX_VERSION}/

RUN	set -x && \
	echo "nginx:x:1000:1000:nginx:/usr/src/app:" > /tmp/passwd && \
	echo "nginx:x:1000:x" > /tmp/group && \
	microdnf \
		--enablerepo=rhel-7-server-rpms \
		--enablerepo=rhel-server-rhscl-7-rpms \
		--enablerepo=rhel-7-server-extras-rpms \
		--enablerepo=rhel-7-server-optional-rpms \
		--enablerepo=rhel-7-server-devtools-rpms \
		install \
			tar \
			gzip \
			which \
			git \
			gcc \
			gcc-c++ \
			llvm-toolset-7.0 \
			make \
			diffutils \
			file \
			patch \
			perl \
			glibc-static \
			libuuid-devel \
			--nodocs

RUN	set -x && \
	mkdir -p /build && \
	cd /build && \
	for key in \
	520A9993A1C052F8 \
	783FCD8E58BCAFBA \
	45F68D54BBE23FB3039B46E59766E084FB0F43D8 \
	7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C \
	F1CF2187 \
	836489290BB6B70F99FFDA0556BCDB593020450F \
	; do \
	gpg --batch --keyserver hkp://ha.pool.sks-keyservers.net --recv-keys "$key" || \
	gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
	gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
	done

RUN	set -x && \
	cd /build && \
#
#	Eustas ngx_brotli module
#
	#curl --location --silent --output /build/ngx_brotli.tar.gz https://api.github.com/repos/eustas/ngx_brotli/tarball/${NGINX_BROTLI_COMMIT} && \
	#mkdir -p /build/ngx_brotli && \
	#tar -zxf /build/ngx_brotli.tar.gz --strip-components=1 -C /build/ngx_brotli && \
	#curl --location --silent --output /build/brotli-${BROTLI_VERSION}.tar.gz https://github.com/google/brotli/archive/v${BROTLI_VERSION}.tar.gz && \
	#tar -zxf /build/brotli-${BROTLI_VERSION}.tar.gz --strip-components=1 -C /build/ngx_brotli/deps/brotli && \
#
#	Cloudflare ngx_brotli module
#
	git clone --depth 1 --recursive https://github.com/cloudflare/ngx_brotli_module.git ngx_brotli && \
#
#	nginx_more_headers module
#
	curl --location --silent --output /build/ngx_more_headers.tar.gz https://github.com/openresty/headers-more-nginx-module/archive/v${NGINX_MORE_HEADERS_VERSION}.tar.gz && \
	tar -zxf /build/ngx_more_headers.tar.gz && \
#
#	nginx_echo module
#
	curl --location --silent --output /build/nginx_echo.tar.gz https://github.com/openresty/echo-nginx-module/archive/v${NGINX_ECHO_VERSION}.tar.gz && \
	tar -zxf /build/nginx_echo.tar.gz && \
#
#	nginx_njs module
#
	curl --location --silent --output /build/nginx_njs.tar.gz https://github.com/nginx/njs/archive/${NGINX_NJS_VERSION}.tar.gz && \
	tar -zxf /build/nginx_njs.tar.gz && \
#
#	nginx_pagespeed module
#
	curl --location --silent --output /build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION}.tar.gz https://github.com/apache/incubator-pagespeed-ngx/archive/v${NGINX_PAGE_SPEED_VERSION}.tar.gz && \
	tar -zxf /build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION}.tar.gz && \
	curl --location --silent --output /build/psol.tar.gz $(/build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION}/scripts/format_binary_url.sh /build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION}/PSOL_BINARY_URL) && \
	tar -zxf /build/psol.tar.gz -C /build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION} && \
#
#
#	nginx webserver
#
	curl --location --silent --output /build/nginx-${NGINX_VERSION}.tar.gz http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
	curl --location --silent --output /build/nginx-${NGINX_VERSION}.tar.gz.asc http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc && \
	gpg --verify --always-trust /build/nginx-${NGINX_VERSION}.tar.gz.asc && \
	tar -zxf nginx-${NGINX_VERSION}.tar.gz && \
#
#	Zlib library
#
	curl --location --silent --output /build/zlib-${ZLIB_VERSION}.tar.gz http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
	curl --location --silent --output /build/zlib-${ZLIB_VERSION}.tar.gz.asc http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz.asc && \
	gpg --verify --always-trust /build/zlib-${ZLIB_VERSION}.tar.gz.asc && \
	tar -zxf /build/zlib-${ZLIB_VERSION}.tar.gz && \
#
#	PCRE library
#
	curl --location --silent --output /build/pcre-${PCRE_VERSION}.tar.gz ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-${PCRE_VERSION}.tar.gz && \
	curl --location --silent --output /build/pcre-${PCRE_VERSION}.tar.gz.sig ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-${PCRE_VERSION}.tar.gz.sig && \
	gpg --verify --always-trust /build/pcre-${PCRE_VERSION}.tar.gz.sig && \
	tar -zxf /build/pcre-${PCRE_VERSION}.tar.gz && \
#
#	OpenSSL library
#
	curl --location --silent --output /build/openssl-${OPENSSL_VERSION}.tar.gz https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \
	curl --location --silent --output /build/openssl-${OPENSSL_VERSION}.tar.gz.asc https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz.asc && \
	gpg --verify --always-trust /build/openssl-${OPENSSL_VERSION}.tar.gz.asc && \
	tar -zxf /build/openssl-${OPENSSL_VERSION}.tar.gz && \
#
#	Mozilla CA cert bundle
#
	curl --location --silent --output /build/cacert.pem https://curl.haxx.se/ca/cacert.pem && \
	curl --location --silent --output /build/cacert.pem.sha256 https://curl.haxx.se/ca/cacert.pem.sha256 && \
	sha256sum -c /build/cacert.pem.sha256
#
#	Compile PCRE
#
RUN cd /build/pcre-${PCRE_VERSION} && \
	source scl_source enable llvm-toolset-7.0 && \
	CC=clang CXX=clang++ ./configure --disable-shared --enable-static --enable-jit && \
	make -j "$(getconf _NPROCESSORS_ONLN)"  install

RUN cd /build/zlib-${ZLIB_VERSION} && \
	source scl_source enable llvm-toolset-7.0 && \
	CC=clang ./configure --static && \
	make -j "$(getconf _NPROCESSORS_ONLN)" install

RUN cd /build/openssl-${OPENSSL_VERSION} && \
	source scl_source enable llvm-toolset-7.0 && \
	./Configure no-shared no-tests no-hw linux-x86_64-clang && \
	make -j "$(getconf _NPROCESSORS_ONLN)" install

RUN	cd /build/nginx-${NGINX_VERSION} && \
	patch -p1 < nginx_${NGINX_VERSION}_http2_spdy.patch && \
	patch -p1 < nginx_${NGINX_VERSION}_hpack_push_remove_server_header.patch && \
	patch -p1 < nginx_${NGINX_VERSION}_dynamic_tls_records_spdy.patch && \
	source scl_source enable llvm-toolset-7.0 && \
	./configure \
		--with-cc=clang \
		--with-cc-opt="-O3 -static" \
		--with-ld-opt="-static -lresolv" \
		--with-pcre=/build/pcre-${PCRE_VERSION} \
		--with-pcre-jit \
		--user=nginx \
		--group=nginx \
		--prefix=/opt/nginx \
		--http-client-body-temp-path=/opt/nginx/var/client_body_temp \
		--http-proxy-temp-path=/opt/nginx/var/proxy_temp \
		--with-threads \
		--with-file-aio \
		--with-http_ssl_module \
		--with-http_v2_module \
		--with-http_v2_hpack_enc \
		--with-http_spdy_module \
		--with-http_gunzip_module \
		--with-http_stub_status_module \
		--without-http_charset_module \
		--without-http_ssi_module \
		--without-http_userid_module \
		--without-http_access_module \
		--without-http_auth_basic_module \
		--without-http_mirror_module \
		--without-http_autoindex_module \
		--without-http_geo_module \
		--without-http_fastcgi_module \
		--without-http_uwsgi_module \
		--without-http_scgi_module \
		--without-http_grpc_module \
		--without-http_memcached_module \
		--add-module=/build/ngx_brotli \
		--add-module=/build/headers-more-nginx-module-${NGINX_MORE_HEADERS_VERSION} \
		--add-module=/build/njs-${NGINX_NJS_VERSION}/nginx \
		--add-module=/build/echo-nginx-module-${NGINX_ECHO_VERSION} && \
#		--add-dynamic-module=/build/incubator-pagespeed-ngx-${NGINX_PAGE_SPEED_VERSION} && \
	cp /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbeginS.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbeginT.o && \
	make -j "$(getconf _NPROCESSORS_ONLN)" install && \
	strip /opt/nginx/sbin/nginx && \
	file /opt/nginx/sbin/nginx && \
	mkdir -p /opt/nginx/var/client_body_temp /opt/nginx/var/proxy_temp && \
	cp /build/cacert.pem /opt/nginx

FROM scratch

ARG NGINX_VERSION

LABEL	name="nginx-minimal ${NGINX_VERSION}" \
		version="${NGINX_VERSION}" \
		description="Static nginx compiled with clang including TLS v1.3, HTTP/2, SPDY 3.1, HPACK, brotli module, njs module, more headers module & echo module"

COPY --from=build	/lib64/ld-linux-x86-64.so.2 \
					/lib64/libc.so.6 \
					/lib64/libdl.so.2 \
					/lib64/libnsl.so.1 \
					/lib64/libnspr4.so \
					/lib64/libnss_dns.so.2 \
					/lib64/libnss_files.so.2 \
					/lib64/libnss3.so \
					/lib64/libnssutil3.so \
					/lib64/libplc4.so \
					/lib64/libplds4.so \
					/lib64/libpthread.so.0 \
					/lib64/libresolv.so.2 \
					/lib64/librt.so.1 \
					/lib64/

#COPY --from=build /lib64 /lib64

COPY --from=build ["/etc/nsswitch.conf", "/tmp/passwd", "/tmp/group", "/etc/"]
COPY --from=build ["/opt/nginx", "/opt/nginx"]

# Define entrypoint and default parameters 
ENTRYPOINT ["/opt/nginx/sbin/nginx"]
CMD ["-g", "daemon off;"]
